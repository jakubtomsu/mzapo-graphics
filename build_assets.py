import os.path
import glob

def path_id(filename):
    return os.path.splitext(os.path.basename(filename))[0]

def load_model(filename):
    print("\n//")
    print(f"// {filename}")
    print("//")

    id = path_id(filename)

    vertices = []
    print()
    print("")
    with open(filename, 'r') as f:
        lines = f.readlines()
        min_x = 1e20
        min_y = 1e20
        min_z = 1e20
        max_x = -1e20
        max_y = -1e20
        max_z = -1e20
        for line in lines:
            if line.startswith('v '):
                # Parse vertex: v x y z
                parts = line.strip().split()
                x, y, z = map(float, parts[1:4])
                vertices.append((x, y, z))
                min_x = min(min_x, x)
                min_y = min(min_y, y)
                min_z = min(min_z, z)
                max_x = max(max_x, x)
                max_y = max(max_y, y)
                max_z = max(max_z, z)

        print("static uint16_t {id}_vert_positions[] = {", end="")
        for vert in vertices:
            x = round(((vert[0] - min_x) / (max_x - min_x)) * 65535)
            y = round(((vert[1] - min_y) / (max_y - min_y)) * 65535)
            z = round(((vert[2] - min_z) / (max_z - min_z)) * 65535)
            print(f"{x}, {y}, {z},", end = "")
        print("};")

        num_indices = 0
        print("static uint32_t {id}_indices[] = {", end="")
        for line in lines:
            if line.startswith('f '):
                # Parse face: f i1 i2 i3 (only triangles, no texture/normal)
                parts = line.strip().split()
                indices = [int(p.split('/')[0]) for p in parts[1:4]]
                num_indices += 3
                # triangle = [vertices[i - 1] for i in indices]  # OBJ is 1-based
                print(f"{indices[0]}, {indices[1]}, {indices[2]}", end="")
        print("};")

        print(f"static mzr_model_t {id}_model = {{")
        print(f"    .bounds_min_x = {min_x},")
        print(f"    .bounds_min_y = {min_y},")
        print(f"    .bounds_min_z = {min_z},")
        print(f"    .bounds_max_x = {max_x},")
        print(f"    .bounds_max_y = {max_y},")
        print(f"    .bounds_max_z = {max_z},")
        print(f"    .num_indices = {num_indices},")
        print(f"    .num_vertices = {len(vertices)},")
        print(f"    .indices     = {id}_indices,")
        print(f"    .vert_positions = {id}_vert_positions,")
        print("};")

def load_assets():
    print(f"// WARNING: this file was generated by mzr_build_mesg.py from")
    print("#pragma once")
    print("#include <stdint.h>")
    print("#include \"mzapo_renderer.h\"")

    models = glob.glob("assets/*.obj")
    for path in models:
        load_model(path)

if __name__ == "__main__":
    load_assets()