import os.path
import glob

def load_model(filename):
    print(f"mzr_model_t {os.path.basename(filename)} = {{}}")

    vertices = []
    print(f"// WARNING: this file was generated by mzr_build_mesg.py from '{filename}'")
    print("#pragma once")
    print("#include \"mzapo_renderer.h\"")
    print()
    print("")
    with open(filename, 'r') as f:
        lines = f.readlines()
        print("float vertices[] = {")
        for line in lines:
            if line.startswith('v '):
                # Parse vertex: v x y z
                parts = line.strip().split()
                x, y, z = map(float, parts[1:4])
                vertices.append((x, y, z))
        print("};")

        print("int indices[] = {")
        for line in lines:
            if line.startswith('f '):
                # Parse face: f i1 i2 i3 (only triangles, no texture/normal)
                parts = line.strip().split()
                indices = [int(p.split('/')[0]) for p in parts[1:4]]
                triangle = [vertices[i - 1] for i in indices]  # OBJ is 1-based
                print("\t", end="")
                for vert in triangle:
                    vert = [vert[0] * 2, 2 * vert[1], 2 *  vert[2]]
                    for v in vert:
                        v = round(1000.0 * v) / 1000.0
                        print(f"{v}, ", end="")
                    print("\t", end="")
                print("")
        print("};")

    # print("mzr_mesh_t ")

    print("};")


def load_assets():
    models = glob.glob("assets/*.obj")
    for path in models:
        load_model(path)

    textures = glob.glob("assets/*.ppm")
    for path in textures:
        load_texture(path)

def load_texture(filepath):
    data, width, height = load_ppm_pixels(filepath)
    print(f"mzr_texture_t {os.path.basename(filepath)} = {{}}")

def load_ppm_pixels(filepath):
    """
    Loads pixel data from a P3 (plain text RGB) PPM file without external libraries.
    Returns a list of lists representing pixel rows (height, width, RGB).
    Each pixel is a tuple (R, G, B).
    """
    try:
        with open(filepath, 'r') as f:
            lines = f.readlines()

        header_lines = []
        pixel_data_lines = []
        state = "header"

        for line in lines:
            line = line.strip()
            if not line: # Skip empty lines
                continue
            if line.startswith('#'): # Skip comment lines
                continue

            if state == "header":
                header_lines.append(line)
                if len(header_lines) == 3: # After magic, dimensions, max_val
                    state = "pixels"
            else:
                pixel_data_lines.append(line)

        # Parse header
        magic_number = header_lines[0]
        if magic_number != 'P3':
            raise ValueError(f"Unsupported PPM format: {magic_number}. Only P3 is supported by this function.")

        width_str, height_str = header_lines[1].split()
        width = int(width_str)
        height = int(height_str)

        max_val = int(header_lines[2])
        if max_val > 255: # Or handle larger values if needed, typically 255
            print(f"Warning: Max color value is {max_val}. Expected 255 for 8-bit color.")


        # Parse pixel data
        all_pixel_values_str = " ".join(pixel_data_lines).split()
        all_pixel_values = [int(val) for val in all_pixel_values_str]

        if len(all_pixel_values) != width * height * 3:
            raise ValueError("Mismatched pixel data size and image dimensions.")

        pixels = []
        index = 0
        for _ in range(height):
            row = []
            for _ in range(width):
                r = all_pixel_values[index]
                g = all_pixel_values[index + 1]
                b = all_pixel_values[index + 2]
                row.append((r, g, b))
                index += 3
            pixels.append(row)

        print(f"Successfully loaded {filepath} (P3)")
        print(f"Image dimensions: {width}x{height}")
        print(f"Max color value: {max_val}")
        print(f"First pixel (top-left): {pixels[0][0]}")
        print(f"Last pixel (bottom-right): {pixels[height-1][width-1]}")

        return pixels, width, height

    except FileNotFoundError:
        print(f"Error: Image file not found at {filepath}")
        return None, None, None
    except Exception as e:
        print(f"Error loading P3 PPM image: {e}")
        return None, None, None

if __name__ == "__main__":
    load_assets()